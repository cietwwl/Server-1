//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Option: missing-value detection (*Specified/ShouldSerialize*/Reset*) enabled
    
// Generated from: FrshAct.proto
namespace FrshAct
{
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"FrshActRequest")]
  public partial class FrshActRequest : global::ProtoBuf.IExtensible
  {
    public FrshActRequest() {}
    
    private int? _cfgId;
    [global::ProtoBuf.ProtoMember(1, IsRequired = false, Name=@"cfgId", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public int cfgId
    {
      get { return _cfgId?? default(int); }
      set { _cfgId = value; }
    }
    [global::System.Xml.Serialization.XmlIgnore]
    [global::System.ComponentModel.Browsable(false)]
    public bool cfgIdSpecified
    {
      get { return this._cfgId != null; }
      set { if (value == (this._cfgId== null)) this._cfgId = value ? this.cfgId : (int?)null; }
    }
    private bool ShouldSerializecfgId() { return cfgIdSpecified; }
    private void ResetcfgId() { cfgIdSpecified = false; }
    
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"FrshActResponse")]
  public partial class FrshActResponse : global::ProtoBuf.IExtensible
  {
    public FrshActResponse() {}
    
    private int? _cfgId;
    [global::ProtoBuf.ProtoMember(1, IsRequired = false, Name=@"cfgId", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public int cfgId
    {
      get { return _cfgId?? default(int); }
      set { _cfgId = value; }
    }
    [global::System.Xml.Serialization.XmlIgnore]
    [global::System.ComponentModel.Browsable(false)]
    public bool cfgIdSpecified
    {
      get { return this._cfgId != null; }
      set { if (value == (this._cfgId== null)) this._cfgId = value ? this.cfgId : (int?)null; }
    }
    private bool ShouldSerializecfgId() { return cfgIdSpecified; }
    private void ResetcfgId() { cfgIdSpecified = false; }
    
    private int? _result;
    [global::ProtoBuf.ProtoMember(2, IsRequired = false, Name=@"result", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public int result
    {
      get { return _result?? default(int); }
      set { _result = value; }
    }
    [global::System.Xml.Serialization.XmlIgnore]
    [global::System.ComponentModel.Browsable(false)]
    public bool resultSpecified
    {
      get { return this._result != null; }
      set { if (value == (this._result== null)) this._result = value ? this.result : (int?)null; }
    }
    private bool ShouldSerializeresult() { return resultSpecified; }
    private void Resetresult() { resultSpecified = false; }
    
    private string _resultValue;
    [global::ProtoBuf.ProtoMember(3, IsRequired = false, Name=@"resultValue", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public string resultValue
    {
      get { return _resultValue?? ""; }
      set { _resultValue = value; }
    }
    [global::System.Xml.Serialization.XmlIgnore]
    [global::System.ComponentModel.Browsable(false)]
    public bool resultValueSpecified
    {
      get { return this._resultValue != null; }
      set { if (value == (this._resultValue== null)) this._resultValue = value ? this.resultValue : (string)null; }
    }
    private bool ShouldSerializeresultValue() { return resultValueSpecified; }
    private void ResetresultValue() { resultValueSpecified = false; }
    
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
}
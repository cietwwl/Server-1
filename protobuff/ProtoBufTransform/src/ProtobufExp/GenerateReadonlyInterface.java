package ProtobufExp;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;

import java_cup.runtime.ComplexSymbolFactory;

public class GenerateReadonlyInterface {

	public static void main(String[] args) {
		if (args.length == 0) {
			System.out.println("Generate csharp readonly interfaces from simple message definitions of protocol buffer.\n"
					+ "Usage: "+getAppName()
					+ " [file names]");
			return;
		}
		for (String arg : args) {
			try {
				CSharpReadonlyInterface(new Yylex(new FileReader(arg)), arg);
			} catch (FileNotFoundException e) {
				e.printStackTrace();
				System.err.println("Error: File not found: " + arg);
			}
		}
	}

	private static void CSharpReadonlyInterface(Yylex l, String protoNm) {
		parser p = new parser(l, new ComplexSymbolFactory());
		try {
			ProtobufExp.Absyn.ExpList parse_tree = p.pExpList();
			System.out.println();
			System.out.println("Parse Succesful!");
			System.out.println();
			System.out.println("[Abstract Syntax]");
			System.out.println();
			System.out.println(PrettyPrinter.show(parse_tree));
			System.out.println();
			System.out.println("[Linearized Tree]");
			System.out.println();
			System.out.println(PrettyPrinter.print(parse_tree));
			
			String protoNmShort= getFileNameNoEx(protoNm);

			ReadonlyInterfaceInfoCollection coll = parse_tree.accept(FoldExpCollection.Instance(), protoNmShort);
			FileWriter writer = new FileWriter(protoNmShort+"Ext.cs");
			writeAndPrint(writer,coll.GenerateCSharpReadonlyInterface());
			writer.close();
			
			writer = new FileWriter(protoNmShort+".AutoGeneratedSegments");
			writeAndPrint(writer,coll.GenerateCSharpExpose());
			writeAndPrint(writer,coll.GenerateServerImplExpose());
			writeAndPrint(writer,coll.GenerateUpdateFromServer());
			
			writeAndPrint(writer,coll.GenerateServerState());
			writeAndPrint(writer,coll.GenerateDataMgr(protoNmShort));
			writer.close();
			
		} catch (Throwable e) {
			System.err.println("At line " + String.valueOf(l.line_num()) + ", near \"" + l.buff() + "\" :");
			System.err.println("     " + e.getMessage());
		}
	}
	
	private static void writeAndPrint(Writer writer, StringBuilder output) throws IOException{
		String outputResult = output.toString();
		System.out.println(outputResult);
		writer.write(outputResult);
	}

	private static String getFileNameNoEx(String nm) {
		if (nm != null && nm.length() > 0) {
			int dot = nm.lastIndexOf(".");
			if (dot > -1) {
				return nm.substring(0, dot);
			}
		}
		return nm;
	}
	
	private static String getAppName(){
		String cl = GenerateReadonlyInterface.class.getName();
		int dot = cl.lastIndexOf(".");
		return cl.substring(dot+1);
	}
}

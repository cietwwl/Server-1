
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package ProtobufExp;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\002\002\000\002\002" +
    "\004\000\002\003\007\000\002\004\010\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\003\000\002\007\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\006\002\000\016\004\001\002\000\004\024" +
    "\011\001\002\000\006\002\000\016\004\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\002" +
    "\uffff\001\002\000\004\004\012\001\002\000\010\017\020" +
    "\020\017\021\016\001\002\000\004\005\037\001\002\000" +
    "\012\005\ufff1\017\020\020\017\021\016\001\002\000\022" +
    "\010\025\011\024\012\023\013\022\014\021\015\031\022" +
    "\026\024\027\001\002\000\022\010\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\022\ufffc\024\ufffc\001\002\000" +
    "\022\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa" +
    "\022\ufffa\024\ufffa\001\002\000\022\010\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\015\ufffb\022\ufffb\024\ufffb\001\002" +
    "\000\004\024\ufff9\001\002\000\004\024\ufff7\001\002\000" +
    "\004\024\ufff6\001\002\000\004\024\ufff3\001\002\000\004" +
    "\024\ufff4\001\002\000\004\024\ufff5\001\002\000\004\024" +
    "\ufff2\001\002\000\004\024\032\001\002\000\004\024\ufff8" +
    "\001\002\000\004\006\033\001\002\000\004\023\034\001" +
    "\002\000\004\007\035\001\002\000\012\005\ufffd\017\ufffd" +
    "\020\ufffd\021\ufffd\001\002\000\004\005\ufff0\001\002\000" +
    "\006\002\ufffe\016\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\006\002\007\003\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\013\005\014\007\012\001\001\000\002\001\001" +
    "\000\010\004\013\005\014\007\035\001\001\000\004\006" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public ProtobufExp.Absyn.ExpList pExpList() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (ProtobufExp.Absyn.ExpList) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ExpList EOF 
            {
              Object RESULT =null;
		ProtobufExp.Absyn.ExpList start_val = (ProtobufExp.Absyn.ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ExpList ::= 
            {
              ProtobufExp.Absyn.ExpList RESULT =null;
		 RESULT = new ProtobufExp.Absyn.NilExpList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpList",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ExpList ::= Exp ExpList 
            {
              ProtobufExp.Absyn.ExpList RESULT =null;
		ProtobufExp.Absyn.Exp p_1 = (ProtobufExp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ProtobufExp.Absyn.ExpList p_2 = (ProtobufExp.Absyn.ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProtobufExp.Absyn.ConsExpList(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpList",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Exp ::= _SYMB_10 _IDENT_ _SYMB_0 FieldList _SYMB_1 
            {
              ProtobufExp.Absyn.Exp RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ProtobufExp.Absyn.FieldList p_4 = (ProtobufExp.Absyn.FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProtobufExp.Absyn.EMsg(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Field ::= FieldModifier FieldType _IDENT_ _SYMB_2 _INTEGER_ _SYMB_3 
            {
              ProtobufExp.Absyn.Field RESULT =null;
		ProtobufExp.Absyn.FieldModifier p_1 = (ProtobufExp.Absyn.FieldModifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ProtobufExp.Absyn.FieldType p_2 = (ProtobufExp.Absyn.FieldType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Integer p_5 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProtobufExp.Absyn.SimpleField(p_1,p_2,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FieldModifier ::= _SYMB_13 
            {
              ProtobufExp.Absyn.FieldModifier RESULT =null;
		 RESULT = new ProtobufExp.Absyn.FieldModifier_required(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldModifier",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FieldModifier ::= _SYMB_11 
            {
              ProtobufExp.Absyn.FieldModifier RESULT =null;
		 RESULT = new ProtobufExp.Absyn.FieldModifier_optional(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldModifier",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FieldModifier ::= _SYMB_12 
            {
              ProtobufExp.Absyn.FieldModifier RESULT =null;
		 RESULT = new ProtobufExp.Absyn.FieldModifier_repeated(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldModifier",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FieldType ::= _SYMB_8 
            {
              ProtobufExp.Absyn.FieldType RESULT =null;
		 RESULT = new ProtobufExp.Absyn.FieldType_int32(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldType",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FieldType ::= _SYMB_9 
            {
              ProtobufExp.Absyn.FieldType RESULT =null;
		 RESULT = new ProtobufExp.Absyn.FieldType_int64(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldType",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FieldType ::= _SYMB_7 
            {
              ProtobufExp.Absyn.FieldType RESULT =null;
		 RESULT = new ProtobufExp.Absyn.FieldType_float(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldType",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FieldType ::= _SYMB_6 
            {
              ProtobufExp.Absyn.FieldType RESULT =null;
		 RESULT = new ProtobufExp.Absyn.FieldType_double(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldType",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FieldType ::= _SYMB_14 
            {
              ProtobufExp.Absyn.FieldType RESULT =null;
		 RESULT = new ProtobufExp.Absyn.FieldType_string(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldType",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FieldType ::= _SYMB_4 
            {
              ProtobufExp.Absyn.FieldType RESULT =null;
		 RESULT = new ProtobufExp.Absyn.FieldType_bool(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldType",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FieldType ::= _SYMB_5 
            {
              ProtobufExp.Absyn.FieldType RESULT =null;
		 RESULT = new ProtobufExp.Absyn.FieldType_bytes(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldType",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FieldType ::= _IDENT_ 
            {
              ProtobufExp.Absyn.FieldType RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProtobufExp.Absyn.FieldTypeIdent(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldType",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FieldList ::= Field 
            {
              ProtobufExp.Absyn.FieldList RESULT =null;
		ProtobufExp.Absyn.Field p_1 = (ProtobufExp.Absyn.Field)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProtobufExp.Absyn.OneFieldList(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldList",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FieldList ::= Field FieldList 
            {
              ProtobufExp.Absyn.FieldList RESULT =null;
		ProtobufExp.Absyn.Field p_1 = (ProtobufExp.Absyn.Field)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ProtobufExp.Absyn.FieldList p_2 = (ProtobufExp.Absyn.FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProtobufExp.Absyn.ConsFieldList(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldList",5, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

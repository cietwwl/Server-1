message BattleTowerConfig{
	optional int32 EveryFloorSweepTime = 1;//默认每层需要的扫荡时间
	optional string ChestDescription = 2;//宝箱说明信息
}

//试练塔模块通用响应消息
message BattleTowerCommonRspMsg{
	required ERequestType reqType = 1;//请求类型
	required EResponseState rspState = 2;//响应结果(除了成功之外都是一场)
	optional bytes rspBody = 3;//对应请求类型的特定返回信息（序列化字节数）
	optional BattleTowerConfig config = 4;//配置信息
}

//////////////////////////////分类型协议对象结构区//////////////////////////////
//RESET_BATTLE_TOWER_DATA
message ResetRspMsg{
	optional int32 defaultChanllengeCount = 1;//重置后的默认挑战次数
}

//[OPEN_MAIN_VIEW]不需要填请求参数，请求打开主界面响应消息
message OpenMainViewRspMsg{
	optional OverFriendInfoMsg overFriendInfoMsg = 1;//即将超越的好友的信息
	required int32 leftResetTimes = 2;//剩余重置次数
	required int32 highestFloor = 3;//记录最高的层数
	repeated BossInfoMsg bossInfoMsg = 4;//产生的Boss的信息
	optional int32 sweepLeftTotalTime = 5;//扫荡还剩余的时间
	optional int32 sweepFloor = 6;//当前已经扫荡到第几层
	optional int32 sweepFloorLeftTime = 7;//当前层剩余的时间
	repeated RewardInfoMsg rewardInfoMsg = 8;//扫荡奖励的数据
	optional bool NeedSweepEnd = 9;//扫荡倒计时已经结束但客户端还没有发送SweepEnd到服务端
}

//[OPEN_CHALLENGE_VIEW]不需要填请求参数，请求打开挑战界面响应消息
message OpenChallengeViewRspMsg{
	required int32 groupId = 1;/*当前所在的组(例如：4~6要一次过，这就是一个组合，就为一个里程碑)Id*/
	required bool isFirst = 2;//是否是首次挑战
	repeated RewardInfoMsg rewardInfoMsg = 3;//奖励物品的信息列表
	required int32 copyId = 4;//战斗ID
}

//[GET_FRIEND_RANK_LIST]响应获取好友的试练塔排行信息
message GetFriendBattleTowerRankInfoRspMsg{
	required int32 friendSize = 1;//当前好友总数数量
	repeated RankingRoleInfoMsg rankingRoleInfoMsg = 2;//好友排行的信息
	required int32 pageIndex = 3;//页号
}

//[GET_STRATEGY_LIST]响应获取攻略列表
message GetStrategyListRspMsg{
	repeated RankingRoleInfoMsg rankingRoleInfoMsg = 1;//攻略列表
}

//[OPEN_TRY_LUCK_VIEW]不需要填请求参数，响应获取试手气界面
message OpenTryLuckViewRspMsg{
	required int32 copperKeyNum = 1;//铜钥匙
	required int32 silverKeyNum = 2;//银钥匙数量
	required int32 goldKeyNum = 3;//金钥匙数量
}

//[SWEEP_START]扫荡开始的响应消息
message SweepStartRspMsg{
	repeated BossInfoMsg bossInfoMsg = 1;//要产生Boss的信息
}

//[SWEEP_END]不需要请求消息，扫荡结束的响应消息
message SweepEndRspMsg{
	repeated RewardInfoMsg rewardInfoMsg = 1;//奖励的信息
}

//[USE_LUCKY_KEY]试手气响应消息
message UseLuckyKeyRspMsg{
	repeated RewardInfoMsg rewardInfoMsg = 1;//获取到的奖励物品
}

//[CHALLENGE_START]挑战某一层的响应协议
message ChallengeStartRspMsg{
	optional BossInfoMsg bossInfoMsg = 1;//产生的Boss的信息
}

//[CHALLENGE_END]挑战某一层结束响应消息
message ChallengeEndRspMsg{
	repeated RewardInfoMsg rewardInfoMsg = 1;//战斗结束之后获得的奖励物品[只有在某一层的最后一组才会发]
}

//[CHALLENGE_BOSS_END]挑战BOSS结束响应协议
message ChallengeBossEndRspMsg{
	repeated RewardInfoMsg rewardInfoMsg = 1;//奖励物品的信息
}

//////////////////////////////协议用到的某些对象结构//////////////////////////////
//即将超越的好友信息
message OverFriendInfoMsg{
	required string headIcon = 1;//头像
	required int32 level = 2;//等级
	required string name = 3;//名字
	required int32 floorGap = 4;//差距层数
}

//产生的Boss信息
message BossInfoMsg{
	required int32 bossId = 1;//BossId唯一标识
	required int32 bossCfgId = 2;//Boss资源Id，配置表中的资源Id
	required int64 bossRemainTime = 3;//Boss剩余的时间
	optional int32 bossInFloor = 4;//第几层出现这个Boss
}

//奖励物品的信息
message RewardInfoMsg{
	required int32 type = 1;//奖励物品的类型，如果是道具类就是模版Id
	required int32 count = 2;//奖励数量
}

//排行榜中的角色信息
message RankingRoleInfoMsg{
	optional int32 rankIndex = 1;//排名
	required string name = 2;//名字
	required string headIcon = 3;//头像图标
	optional int32 highestFloor = 4;//最高调整层数
	required int32 level = 5;//等级
	required string magicIcon = 6;//法宝的图标
	repeated RankingHeroInfoMsg rankingHeroInfoMsg = 7;//阵容中的佣兵信息列表
	optional bool isMyself = 8;//是否是自己
}

//排行榜阵容中的佣兵信息
message RankingHeroInfoMsg{
	required string heroId = 1;//佣兵的资源Id
	required int32 starNum = 2;//佣兵的星数
	optional int32 quality = 3;//佣兵的品质
	required int32 level = 4;//佣兵的等级
	optional bool isMainRole = 5;//是否是主角
}
syntax = "proto2";
option java_package = "com.rwproto";
option java_outer_classname = "PeakArenaServiceProtos";
import "SkillService.proto";
import "FashionService.proto";
import "BattleCommon.proto";

enum eArenaType {
	GET_DATA = 0;     //
	CHANGE_ENEMY = 1; // 首次筛选对手/换一批对手
	CHANGE_HERO = 2;  //
	ARENA_RECORD = 3; //
	ENEMY_INFO = 4;   // 获取对手信息，保存在ArenaData arenaData = 3;不进行重新筛选
	CLEAR_TIME = 5;	  // 重置CD时间
	ARENA_FIGHT_PREPARE = 6;//
	ARENA_FIGHT_START = 7;  //第一场开始的时候发送
	ARENA_FIGHT_FINISH = 8;//最后一场结束发送
	SYNC_RECORD = 9;//
	GET_PLACE = 10;//
	SWITCH_OVER = 12;//更换玩家队伍顺序,使用 reorder 参数表示1，2，3队伍的ID
	BUY_CHALLENGE_COUNT = 13;// 购买挑战次数
	FIGHT_CONTINUE = 14;//挑战不同队伍的中间过渡时间发送 只需要设置把对手ID放入MsgArenaRequest.userId
	GET_SCORE_REWARD_VIEW = 15; // 积分奖励界面
	GET_SCORE_REWARD = 16; // 领取积分奖励
	GET_ALL_SCORE_REWARD = 17; // 领取所有的积分奖励
	GET_RECORD = 18; // 获取战报
	GET_RECORD_DETAIL = 19; // 获取战报详情
	GET_HURT_DETAIL = 20; // 查看伤害的详细信息
}

enum eArenaResultType {
	ARENA_SUCCESS = 1;//成功
	ARENA_FAIL = 2;//失败
}

message HeroData{
	required string heroId = 1;
	required string templeteId = 2;
	optional int32 level = 3;
	optional int32 starLevel = 4;
	optional int32 fighting = 5;//暂时不传递对手佣兵的战力
	optional string qualityId = 6;
	optional int64 exp = 7; // 有用咩？
	repeated SkillService.TagSkillData skills = 8;  // 咩来嘎 ？？
	optional int32 teamId = 10;
	optional string headImage = 11;// 暂时不发送对手的头像，用ArenaData.headImage
}

message TeamInfo{
	required int32 teamId = 1;
	repeated HeroData heros = 2;//用于传递对手的佣兵信息给客户端
	repeated string heroIds = 3;//仅用于保存自己的阵容，仅有佣兵的ID，不需要主角的ID
	optional string magicId = 4; // 自己的法宝存储ID，不能够是modelID
	optional int32 magicLevel = 5;
	optional HeroData player = 6; //用于传递对手的主角给客户端
	optional string armyInfo = 7;//Json字符串：对手队伍信息
	optional int32 enemyMagicModelId = 8; //对手的法宝模板ID，用来显示
	repeated BattleCommon.BattleHeroPosition heroPositions = 9;//仅用于保存自己的阵容的站位，不需要主角的(固定为0)，从1到4
}

message ArenaData{
	required string userId = 1;
	optional int32 place = 5;// 当前排名
	optional int32 maxPlace = 6; // 历史最高排名
	optional int32 winCount = 8; //历史胜利次数
	optional int32 career = 11;
	optional string name = 12;
	optional int32 level = 13;
	optional string headImage = 14;
	optional string templeteId = 15;
	optional int32 fighting = 16;  // 不应该使用这个字段，应该从队伍信息和佣兵信息的战力来计算
	repeated SkillService.TagSkillData roleSkill = 17;
	repeated TeamInfo teams = 19;
    optional string groupName = 23; // 帮派名称
	optional string armyInfo = 24;//暂时没有用 Json字符串：队伍信息
	optional string headFrame = 25;//userId对应玩家的头像框
}

message ArenaInfo{//保存对手概要信息
	required string userId =1;
	optional int32 place = 4;
	optional int32 winCount = 5;//历史胜利次数
	optional int32 level = 6;
	optional string name = 7;
	optional string headImage = 8;
	optional int32 fighting = 9;//应该是对手的战力
	optional int32 starLevel = 10;
	optional string qualityId = 11;
	optional int32 career = 12;
	optional string headFrame = 13;//对手的头像框
	optional FashionService.FashionUsed fashionUsage = 14;//TODO 玩家穿戴的时装（如果玩家没有购买时装，则是没有指定）
	optional int32 sex = 15;// 显示时装需要性别，具体的值参见服务器ESex,客户端eSex
}

message ArenaRecord{
	required string userId = 1; // 对手的userId
	optional bool win = 2; // 是否胜利
	optional int32 placeUp = 3; // 排名升降
	optional string name = 4; // 对手的名字
	optional string headImage = 5; // 头像资源
	optional int32 level = 6; // 等级
	optional int64 time = 7; // 记录产生的时间
	optional int32 challenge = 8; // 0=防守，1=挑战
	required fixed32 recordId = 9; // 记录的id
	optional fixed32 suitId = 10; // 时装的套装id
	optional fixed32 gender = 11; // 性别
	optional fixed32 vipLv = 12; // VIP等级
}

message PeakArenaHeroData {
	required string heroId = 1;
	required string headImage = 2; // 头像资源id
	required fixed32 level = 3; // 等级
	required fixed32 starLv = 4; // 星级
	required string qualityId = 5; // 品质id
	optional fixed32 modelId = 6; // 英雄的modelId，主角不用发
}

message PeakArenaMagicData {
	required fixed32 modelId = 1; // 法宝的modelId
	required fixed32 level = 2;
}

message PeakArenaUserData {
	required string name = 1; // 名字
	repeated PeakArenaHeroData heroData = 2; // 英雄数据，包括主角
	required PeakArenaMagicData magicData = 3; // 法宝数据
}

message PeakArenaDetailRecord {
	required PeakArenaUserData challenger = 1; // 挑战者
	required PeakArenaUserData defender = 2; // 防守者
}

message MsgArenaRequest{
    required eArenaType arenaType = 1;
	optional string userId = 2;
	repeated TeamInfo teams = 3;
	optional ArenaInfo enemy = 4;
	optional bool win = 5;
	repeated int32 reorder = 6;// 重新排列玩家队伍：按照顺序列出1、2、3队伍的ID
	repeated HurtRecord hurtRecord = 7; // 玩家队伍的伤害记录，arenaType=ARENA_FIGHT_FINISH的时候需要发送
	optional fixed32 recordId = 8; // 查看战报详情时的战报id
	optional fixed32 hurtIndex = 9; // 查看伤害详情的时候发送的索引（0、1、2）
	optional fixed32 scoreRewardId = 10; // 请求的奖励id(arenaType = GET_SCORE_REWARD是发送)
}

message MsgArenaResponse{
	required eArenaType arenaType = 1;
	optional eArenaResultType arenaResultType = 2;
	optional ArenaData arenaData = 3;
	repeated ArenaInfo listInfo = 4; // 对手信息
	repeated ArenaRecord listRecord = 5;
	optional int32 place = 6;
	optional string resultTip = 7;//服务器返回给客户端的操作结果提示，不需要显示，主要用来打印日志帮助调试
	optional int32 maxChallengeCount = 8;   // 配置的最大挑战次数
	optional int32 buyCount = 9;// 购买次数
	optional int32 currentBuyCost = 10;//当前购买次数下一档需要的货币数量
	optional int32 challengeCount = 11;//玩家挑战次数
	optional int32 cdTime = 12;//玩家倒计时
	optional int32 gainCurrencyPerHour = 13;	//每小时能获得的巅峰币
	optional int32 resetCost = 14;//重置需要的费用
	optional int32 placeUp = 15; //战斗胜利后发送
	repeated PeakArenaDetailRecord challengeRecords = 16; // 战斗记录（arenaType=GET_RECORD_DETAIL时回复）
	optional HurtRecord hurtDetail = 17; // 伤害记录（arenaType=GET_HURT_DETAIL时回复）
	repeated fixed32 alreadyGetRewardId = 18; // 已经领取的积分奖励id
	optional fixed32 currentScore = 19; // 当前的积分
}

message HurtRecord {
	required fixed32 teamId = 1; // 队伍id
	repeated HurtValue myHurtValue = 2; // 自身的伤害信息
	repeated HurtValue enemyHurtValue = 3; // 对手的伤害信息
}

message HurtValue {
	required string heroId = 1; // 英雄id
	required fixed64 value = 2;	//伤害值
}

syntax = "proto2";
option java_package = "com.rwproto";
option java_outer_classname = "BattleTowerServiceProtos";

/*
TODO auto generate classes for client and server
#program:
OPEN_MAIN_VIEW: OpenMainViewRspMsg;
GET_FRIEND_RANK_LIST: GetFriendBattleTowerRankInfoReqMsg->GetFriendBattleTowerRankInfoRspMsg;

*/

//////////////////////////////请求类型&响应消息枚举//////////////////////////////
enum ERequestType{
	OPEN_MAIN_VIEW = 1;//打开主界面
	OPEN_CHALLENGE_VIEW = 2;//打开挑战界面
	GET_FRIEND_RANK_LIST = 3;//获取试练塔中好友的排行信息
	GET_STRATEGY_LIST = 4;//获取某个里程碑中的攻略列表
	OPEN_TRY_LUCK_VIEW = 5;//打开试手气界面
	SWEEP_START = 6;//扫荡开始
	SWEEP_END = 7;//扫荡结束
	USE_LUCKY_KEY = 8;//用金银铜钥匙试手气
	RESET_BATTLE_TOWER_DATA = 9;//重置试练塔数据,不需要请求参数，结果没有额外信息
	CHALLENGE_START = 10;//挑战开始
	CHALLENGE_END = 11;//挑战结束
	CHALLENGE_BOSS_START = 12;//挑战BOSS开始
	CHALLENGE_BOSS_END = 13;//挑战BOSS结束
}

enum EResponseState{
	RSP_SUCESS = 1;//成功
	RSP_FAIL = 2;//失败
}

enum EKeyType{
	KEY_COPPER = 1;//铜钥匙
	KEY_SILVER = 2;//银钥匙
	KEY_GOLD = 3;//金钥匙
}

//////////////////////////////请求消息&响应通用消息区//////////////////////////////
message BattleTowerConfig{
	optional int32 EveryFloorSweepTime = 1;//默认每层需要的扫荡时间,BattleTowerConfigCfg.battleTowerConfigKey.theSweepTime4PerFloor
	optional string ChestDescription = 2;//宝箱说明信息
}
//试练塔模块通用请求消息
message BattleTowerCommonReqMsg{
	required ERequestType reqType = 1;//请求类型
	optional bytes reqBody = 2;//对应请求需要的参数的序列化字节数组
	optional bool needConfig = 3;//请求服务器返回配置信息
}

//试练塔模块通用响应消息
message BattleTowerCommonRspMsg{
	required ERequestType reqType = 1;//请求类型
	required EResponseState rspState = 2;//响应结果(除了成功之外都是一场)
	optional bytes rspBody = 3;//对应请求类型的特定返回信息（序列化字节数）
	optional BattleTowerConfig config = 4;//配置信息
	optional string tips = 5;//正常或者错误的提示
}

//////////////////////////////分类型协议对象结构区//////////////////////////////
//RESET_BATTLE_TOWER_DATA
message ResetRspMsg{
	optional int32 defaultChanllengeCount = 1;//重置后的默认挑战次数
}

//[OPEN_MAIN_VIEW]不需要填请求参数，请求打开主界面响应消息
message OpenMainViewRspMsg{
	optional OverFriendInfoMsg overFriendInfoMsg = 1;//即将超越的好友的信息
	required int32 leftResetTimes = 2;//剩余重置次数
	required int32 highestFloor = 3;//记录最高的层数
	repeated BossInfoMsg bossInfoMsg = 4;//产生的Boss的信息
	optional int32 sweepLeftTotalTime = 5;//扫荡还剩余的时间
	optional int32 sweepFloor = 6;//如果不是扫荡状态，就是最后一次挑战通过的层数。如果是扫荡，就是当前扫荡到了第几次
	optional int32 sweepFloorLeftTime = 7;//当前层剩余的时间
	repeated RewardInfoMsg rewardInfoMsg = 8;//扫荡奖励的数据：扫荡倒计时已经结束但客户端还没有发送SweepEnd到服务端，服务端就会发送奖励
	optional string OpenBoxTip = 9;//打开宝箱的提示语
	optional int32 UseKeyCount = 10;//一次可以使用的钥匙数量
}

//[OPEN_CHALLENGE_VIEW]不需要填请求参数，请求打开挑战界面响应消息
message OpenChallengeViewRspMsg{
	required int32 groupId = 1;/*当前所在的组(例如：4~6要一次过，这就是一个组合，就为一个里程碑)Id*/
	required bool isFirst = 2;//是否是首次挑战
	repeated RewardInfoMsg rewardInfoMsg = 3;//奖励物品的信息列表
	required int32 copyId = 4;//战斗ID
	optional bool isBreak=5;//上次挑战失败，挑战过程已中断
}

//[GET_FRIEND_RANK_LIST]请求获取好友的试练塔排行信息
message GetFriendBattleTowerRankInfoReqMsg{
	required int32 pageIndex = 1;//获取第几页好友的信息
}

//[GET_FRIEND_RANK_LIST]响应获取好友的试练塔排行信息
message GetFriendBattleTowerRankInfoRspMsg{
	optional int32 friendSize = 1;//当前好友总数
	repeated RankingRoleInfoMsg rankingRoleInfoMsg = 2;//好友排行的信息
	required int32 pageIndex = 3;//页号
}

//[GET_STRATEGY_LIST]请求获取攻略列表
message GetStrategyListReqMsg{
	required int32 floor = 1;//获取某层的攻略
}

//[GET_STRATEGY_LIST]响应获取攻略列表
message GetStrategyListRspMsg{
	repeated RankingRoleInfoMsg rankingRoleInfoMsg = 1;//攻略列表
}

//[OPEN_TRY_LUCK_VIEW]不需要填请求参数，响应获取试手气界面
message OpenTryLuckViewRspMsg{
	required int32 copperKeyNum = 1;//铜钥匙
	required int32 silverKeyNum = 2;//银钥匙数量
	required int32 goldKeyNum = 3;//金钥匙数量
}

//[SWEEP_START]扫荡开始的请求消息
message SweepStartReqMsg{
	required int32 floor = 1;//开始扫荡的层数
}

//[SWEEP_START]扫荡开始的响应消息
message SweepStartRspMsg{
	repeated BossInfoMsg bossInfoMsg = 1;//要产生Boss的信息
}

//[SWEEP_END]不需要请求消息，扫荡结束的响应消息
message SweepEndRspMsg{
	repeated RewardInfoMsg rewardInfoMsg = 1;//奖励的信息
}

//[USE_LUCKY_KEY]试手气请求消息
message UseLuckyKeyReqMsg{
	required EKeyType keyType = 1;//使用的钥匙类型
	required int32 useNum = 2;//使用的数量
}

//[USE_LUCKY_KEY]试手气响应消息
message UseLuckyKeyRspMsg{
	repeated RewardInfoMsg rewardInfoMsg = 1;//获取到的奖励物品
}

//[CHALLENGE_START]挑战某一层的请求协议
message ChallengeStartReqMsg{
	required int32 floor = 1;//挑战哪一层
}

/*
* //[CHALLENGE_START]挑战某一层的响应协议
* message ChallengeStartRspMsg{
* 	optional BossInfoMsg bossInfoMsg = 1;//产生的Boss的信息
* }
*/

//这个消息只在战斗成功之后才发送
//[CHALLENGE_END]挑战某一层结束请求消息
message ChallengeEndReqMsg{
	required int32 floor = 1;//结束的是哪一层
	required bool result = 2;//战斗结果
	repeated RankingHeroInfoMsg rankingHeroInfoMsg = 3;//阵容中角色的信息
}

//[CHALLENGE_END]挑战某一层结束响应消息
message ChallengeEndRspMsg{
	repeated RewardInfoMsg rewardInfoMsg = 1;//战斗结束之后获得的奖励物品【未打过整组的情况下不发送】
	repeated BossInfoMsg bossInfoMsg = 2;//产生的Boss的信息
}

//[CHALLENGE_BOSS_START]挑战BOSS开始请求协议
message ChallengeBossStartReqMsg{
	required int32 bossId = 1;//boss的Id
}

//[CHALLENGE_BOSS_END]挑战BOSS结束请求协议
message ChallengeBossEndReqMsg{
	required int32 bossId = 1;//boss的Id
	required bool result = 2;//挑战的结果
}

//[CHALLENGE_BOSS_END]挑战BOSS结束响应协议
message ChallengeBossEndRspMsg{
	repeated RewardInfoMsg rewardInfoMsg = 1;//奖励物品的信息
}

//////////////////////////////协议用到的某些对象结构//////////////////////////////
//即将超越的好友信息
message OverFriendInfoMsg{
	required string headIcon = 1;//头像
	required int32 level = 2;//等级
	required string name = 3;//名字
	required int32 floorGap = 4;//差距层数
}

//产生的Boss信息
message BossInfoMsg{
	required int32 bossId = 1;//BossId唯一标识
	required int32 bossCfgId = 2;//Boss资源Id，配置表中的资源Id
	required int64 bossRemainTime = 3;//Boss剩余的时间
	optional int32 bossInFloor = 4;//第几层出现这个Boss
}

//奖励物品的信息
message RewardInfoMsg{
	required int32 type = 1;//奖励物品的类型，如果是道具类就是模版Id
	required int32 count = 2;//奖励数量
}

//排行榜中的角色信息
message RankingRoleInfoMsg{
	optional int32 rankIndex = 1;//排名
	required string name = 2;//名字
	required string headIcon = 3;//头像图标
	optional int32 highestFloor = 4;//最高调整层数
	required int32 level = 5;//等级
	required string magicIcon = 6;//法宝的图标
	repeated RankingHeroInfoMsg rankingHeroInfoMsg = 7;//阵容中的佣兵信息列表
	optional bool isMyself = 8;//是否是自己
	optional string headFrame = 9;//头像框
	optional int32 starNum = 10;//星数
}

//排行榜阵容中的佣兵信息
message RankingHeroInfoMsg{
	required string heroId = 1;//佣兵的资源Id
	required int32 starNum = 2;//佣兵的星数
	optional int32 quality = 3;//佣兵的品质
	required int32 level = 4;//佣兵的等级
	optional bool isMainRole = 5;//是否是主角
}






syntax = "proto2";
option java_package = "com.rwproto";
option java_outer_classname = "ArenaServiceProtos";
import "SkillService.proto";
import "SyncAttri.proto";
import "BattleCommon.proto";
import "FashionService.proto";

package ArenaService;

enum eArenaType {
	GET_INFO = 0;     //
	CHANGE_ENEMY = 1; // 
	CHANGE_HERO = 2;  //
	ARENA_RECORD = 3; //
	ENEMY_INFO = 4;   //
	CLEAR_TIME = 5;	  //
	ARENA_FIGHT_PREPARE = 6;//
	ARENA_FIGHT_START = 7;  //
	ARENA_FIGHT_FINISH = 8;//
	SYNC_RECORD = 9;//
	GET_PLACE = 10;
	GET_HURT_VALUE = 11;//获取伤害统计
	BUY_TIMES = 12;		//购买竞技场次数
	SCORE=13;  //竞技场积分
	GET_REWARD = 14;//领取奖励
	HIS_RANK_REWARD_VIEW = 15;//历史排行榜奖励总和
	HIS_RANK_GET_REWARD = 16;//领取历史排行榜阶段奖励
}

enum eArenaResultType {
	ARENA_SUCCESS = 1;//成功
	ARENA_FAIL = 2;//失败
}

//阵容类型
enum ArenaEmbattleType{
	ARENA_ATK = 1;//攻击阵容
	ARENA_DEFEND = 2;//防守阵容
}

message HeroData{
	required string heroId = 1;
	required string templeteId = 2;
	optional int32 level = 3;
	optional int32 starLevel = 4;
	optional int32 fighting = 5;
	optional string qualityId = 6;
	optional int64 exp = 7;
	repeated SkillService.TagSkillData skills = 8;
	repeated SyncAttri.TagAttriData attrs = 9;
}

message ArenaData{
	required string userId = 1;
	optional int32 career = 2;
	optional int32 place = 3;
	optional int32 maxPlace = 4;
	optional int32 remainCount = 5;
	optional int64 cdTime = 6;
	optional int64 lastFightTime = 7;
	optional string headImage = 8;
	optional int32 level = 9;
	optional int32 fighting = 10;
	optional string name = 11;
	repeated HeroData heros = 12;
	optional int32 magicId = 13;
	optional int32 magicLevel = 14;
	repeated SkillService.TagSkillData roleSkill = 15;
	repeated SyncAttri.TagAttriData roleAttr = 16;
	optional string templeteId = 17;
	optional int32 winCount = 18;
	optional string armyInfo = 19;
	optional string groupName = 20;
}

message ArenaInfo{
	required string userId = 2;
	optional int32 career = 3;
	optional int32 place = 4;
	optional int32 state = 5;
	optional string headImage = 6;
	optional int32 level = 7;
	optional int32 fighting = 8;
	optional string name = 9;
	repeated string heroImages = 10;
	optional int32 modelId = 11;	//模型id，应该是required，为了调试方便先用optional
	optional FashionService.FashionUsed fashionUsage = 12;//玩家穿戴的时装（如果玩家没有购买时装，则是没有指定）
	optional int32 sex = 13;// 显示时装需要性别，具体的值参见服务器ESex,客户端eSex
	optional fixed32 magicModelId = 14; // 法宝的模型id
}

message ArenaRecord{
	required int32 recordId = 1;
	required string userId = 2;
	optional int32 win = 3;//0是输，1是赢
	optional int32 placeUp = 4;
	optional string name = 5;
	optional string headImage = 6;
	optional int32 level = 7;
	optional int64 time = 8;
	optional int32 challenge = 9;
	optional int32 vip = 10;
	optional int32 sex = 11;
	optional string fashionId = 12;
	optional int32 fighting = 13;
	
}

message MsgArenaRequest{
    required eArenaType arenaType = 1;
	optional string userId = 2;
	repeated BattleCommon.BattleHeroPosition heroIds = 3;
	optional ArenaInfo enemy = 4;
	optional int32 win = 5;
	repeated HurtValue hurtValue = 6;	//战斗伤害统计
	optional int32 recordId = 7;		//请求的伤害统计id
	repeated BattleCommon.BattleHeroPosition atkIdList = 8;		//进攻阵容佣兵列表
	optional int32 rewardId = 14;// 领取奖励
	optional int32 historyRewardId = 15;	//领取历史排行榜奖励ID
}

message HurtValue{
	required string heroId = 1;
	required float value = 2;		//伤害值
	required string icon = 3;		//图标
	required int32 startlevel = 4;	//星级
	required int32 level = 5;		//等级
	required bool isDead = 6;		//是否死亡
	required BattleCommon.ePlayerType playerType = 7;	//角色类型
	required BattleCommon.ePlayerCamp camp = 8;	//阵营
	required float Hp = 9;			//剩余血量
	required float Sp = 10;			//剩余蓝量
	optional string quality = 11;   //品质配置ID
}

message MsgArenaResponse{
	required eArenaType arenaType = 1;
	optional eArenaResultType arenaResultType = 2;
	optional ArenaData arenaData = 3;
	repeated ArenaInfo listInfo = 4;
	repeated ArenaRecord listRecord = 5;
	optional int32 place = 6;
	repeated HurtValue hurtValue = 7;		//战斗伤害统计
	repeated string atkList = 8;			//进攻阵容佣兵列表
	optional HistoryRankingRise history = 9;//历史排名上升提示
	optional int32 resetCost = 10;			//重置冷却时间所需的钻石
	optional int32 buyTimesCost = 11;		//购买挑战次数所需的钻石
	optional int32 buyTimes = 12;			//当前购买的次数
	optional int32 currentScore = 13;			//当前积分
	repeated int32 getCount = 14;// 已领奖励次数
	optional ArenaHistoryResponse historyReward = 15;	//历史排行榜奖励总和
	optional eArenaResultType gainRewardResult = 16; //领取历史排行榜奖励结果
}

message HistoryRankingRise{//历史排名上升

	required int32 historyRanking = 1;	//历史排名
	required int32 currentRanking = 2;	//当前排名
	optional int32 goldAward = 3;		//钻石奖励
	required int32 rankingUp = 4;		//排名上升
}

message ArenaHistoryResponse{	//打开历史排名奖励界面的响应
	repeated ArenaHistoryRewardSum rewardSum = 1;	//收益总和
	repeated ArenaHisRewardView rewardView = 2;		//领取列表
}

message ArenaHistoryRewardSum{ //历史排行榜奖励总和
	required int32 itemId = 1;	//历史排行榜奖励总和奖励ID
	required int32 num = 2;	//历史排行榜奖励总和奖励数量
}
message ArenaHisRewardView{	//单个历史排名奖励领取界面
	required int32 rewardId = 1;
	required bool gainReward = 2;					//是否已经领取
}

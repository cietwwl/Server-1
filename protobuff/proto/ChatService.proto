syntax = "proto2";
option java_package = "com.rwproto";
option java_outer_classname = "ChatServiceProtos";

import "FashionService.proto";

enum eChatType {
	CHANNEL_WORLD = 1;//世界频道
	CHANNEL_GROUP = 2; // 公会频道
	CHANNEL_PERSON = 3; // 私聊频道
	CHAT_TREASURE = 4;//秘境分享
	CHANNEL_SYSTEM = 5; // 系统频道
	CHAT_FRIEND = 6; // 好友互動
	CHAT_TEAM = 7; // 心魔录组队
	CHAT_RANDOM_BOSS = 8; // 隨機boss互動
	CHANNEL_TEAM = 9;// 组队频道
}

enum eChatResultType {
	SUCCESS = 1;//成功
	FAIL = 2;//失败
}

enum eAttachItemType{
	Emo = 1;//表情类
	Item = 2;//道具类
	Hero = 3;//英雄类
	Magic = 4;//法宝
	Treasure = 5; // 附件類型：秘境分享
	Friend = 6; // 附件類型：好友互動
	Team = 7; // 附件類型：隊伍互動
	RandomBoss = 8; // 附件類型：隨機boss
}

enum eClickEvent{
	None = 1;//无事件
	HeroPreview = 2;//英雄预览
	AddFriend = 3;//添加好友
}

message MessageUserInfo{
	required string userId = 1;//角色Id
	optional string userName = 2;//角色名字
	optional string headImage = 3;//头像
	optional int32 level = 4;//角色等级
	optional string groupId = 5;//帮会Id
	optional string groupName = 6;//帮会名字
	optional string headbox = 7;//头像品质框
	optional int32 vipLv = 8; // vip等级
	optional int32 fashionTemplateId = 9; // 时装的模板id
	optional int32 careerType = 10; // 职业类型
	optional int32 gender = 11; // 性别
	optional FashionService.FashionUsed fashionUsage = 12; //玩家穿戴的时装（如果玩家没有购买时装，则是没有指定）
}

message ChatMessageData{
	optional MessageUserInfo sendMessageUserInfo = 1;//发送消息的人的信息
	optional MessageUserInfo receiveMessageUserInfo = 2;//接收消息的人的信息
	required string message = 3;//消息内容
	optional int64 time = 4; // 发送的时间（修改于2016-07-19，从string改为int64）
	optional string treasureName = 5;//密境的名字
	optional int32 treasureDefNum = 6;//密境邀请的人数
	optional string treasureId = 7;//密境Id
	optional int32 treasureType = 8;//密境的类型
	optional bool isRead = 9;//是否读取过
	repeated ChatAttachItem attachItem = 10;//附件
	optional eClickEvent clickEvent = 11;//点击事件
	repeated string clickEventData = 12;//点击事件数据
}

message ChatAttachItem{
	required int32 type = 1;//类型
	required string id = 2;//Id
	optional string extraInfo = 3;//额外的消息
}

message MsgPersonChatUserInfo {
	required string userId = 1; // 请求的target的userId
	optional string name = 2;//私聊人的名字
	optional int32 unReadCount = 3; // 未讀數量
}

message MsgChatRequest{
    required eChatType ChatType = 1;//聊天类型
	optional ChatMessageData chatMessageData = 2;//聊天数据
}

message MsgChatResponse{
	required eChatType chatType = 1;
	optional eChatResultType chatResultType = 2;
	repeated ChatMessageData listMessage = 3;
	optional bool onLogin = 5;//是否是登录
	repeated MsgPersonChatUserInfo usersOfPrivateChannel = 6; // 私聊列表上面的用户列表（私聊缓存的数量较大，所以先发这个列表到客户端，客户端通过uuid再请求私聊的列表）
}

message MsgChatRequestPrivateChats {
	required string userId = 1; // 请求的target的userId
}
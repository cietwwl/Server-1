syntax = "proto2";
option java_package = "com.rwproto";
option java_outer_classname = "GroupCompetitionProto";
import "FashionService.proto";

package groupCompetition;


enum GCRequestType{
	EnterPrepareArea = 1;	//进入备战区
	LeavePrepareArea = 2;	//离开备战区
	InformPreparePosition = 3;	//通知备战区的位置
	LiveMsg = 4; //赛事直播
	PlaybackMsg = 5; //赛事回放
	AllGuess = 6; //所有竞猜信息
	NewGuess = 7; //发起新的竞猜
	GetPlayersBaseInfo = 8;	//获取同屏玩家的基本信息
	GetMatchView = 9; // 获取对阵信息
	GetSelectionData = 10; // 获取海选信息
	GetCanGuessMatch = 11;	//获取所有当前的可以竞猜的项目（以数据同步的方式返回）
	SetTeamReady = 12; // 设置准备状态
	CancelTeamReady = 13; // 取消准备状态
	LeaveTeam = 14; // 离开队伍
	InviteMember = 15; // 邀请成员
	KickMember = 16; // 剔除成员
	CreateTeam = 17; // 创建队伍
	AdjustTeamMember = 18; // 调整队伍成员
	StartMatching = 19; // 开始匹配
	CancelMatching = 20; // 取消匹配
	StartRandomMatching = 21; // 开始随机匹配
	CancelRandomMatching = 22; // 取消随机匹配
	PersonalMatching = 23; // 个人匹配
	PersonalCancelMatching = 24; // 取消个人匹配
	LeaveLivePage = 25; //离开直播页面
	GetKillRank = 26;	//个人击杀排行榜
	GetWinRank = 27;	//连胜排行榜
	GetScoreRank = 28;	//积分排行榜
	GetGroupScoreRank = 29; // 帮派积分排行榜
	InPrepareArea = 30;		//加载完了备战区
}

enum TeamStatusType {
	Kicked = 1; // 被踢
	BecomeLeader = 2; // 成为队长
	CanMatch = 3; // 可匹配
	StartMatch = 4; // 开始匹配
	CancelMatch = 5; // 取消匹配
}

enum GCResultType {
	SUCCESS = 1; //成功
	DATA_ERROR = 2; //数据异常
	COIN_NOT_ENOUGH = 3;	//金币不足
	NO_SAME_SCENE = 4;		//同屏场景不存在
}

message CommonReqMsg{
	required GCRequestType reqType = 1;		//请求功能协议类型
	optional AreaPosition position = 2;		//玩家当前在备战区的位置
	repeated string playersIdList = 3;	//请求同屏玩家的基本信息（list<string>）
}

message CommonRspMsg{
	required GCResultType rstType = 1; //是否成功处理
	optional string tipMsg = 2;	//提示消息，可以是成功，也可以是失败的提示消息
	repeated PlayerBaseInfo players = 3;	//同屏玩家的基本信息
}

message CommonGetDataReqMsg {
	required GCRequestType reqType = 1; // 请求的类型
	optional ParaForLiveMsg livePara = 2;	//赛事直播（和回放）的参数
	optional ParaForPlayBack playBackPara = 3;	//GCRequestType.PlaybackMsg的参数（直播或回放顶部的内容）
	optional ParaForGetRank getRankPara = 4;	//获取排行榜的参数
}

message CommonGetDataRspMsg {
	required GCResultType rstType = 1; // 请求结果
	optional string tipMsg = 2; // 提示消息
	optional SelectionRspData selectionData = 3; // 海选信息（对于GCRequestType.GetSelectionData可用）
	repeated GCompRankItem rankData = 4;	//排行榜数据
	optional GCompGroupScoreRankRspData groupScoreRankRspData = 5; // 帮派积分排行榜数据
}

//备战区同屏玩家坐标
message AreaPosition{
	required float x = 1;
	required float y = 2;
}

//赛事直播回放
message LiveAndPlaybackInfo{
	required string test = 1; //内容
	required int32 continueWin = 2; //连胜
	required int32 personalScore = 3; //个人积分
	required int32 groupScore = 4; //帮派积分
}

//请求赛事直播
message ReqLiveAndPlaybackMsg{
	required GCRequestType reqType = 1; //请求类型
}

//回应赛事直播
message RspLiveAndPlaybackMsg{
	required GCResultType rstType = 1; //是否成功处理
	repeated LiveAndPlaybackInfo msgs = 2; //消息列表:个人战有1条，组队战有3条
}

//赛事竞猜
message MatchGuessInfo{
	required int32 session = 1; //第几届
	required int32 topN = 2; //几强
	required int32 groupNum = 3; //第几组
	repeated GroupInfo groups = 4; //两个帮派的信息
	required int32 guessNum = 5; //竞猜人数
	required bool hasGuess = 6; //是否参与竞猜了
}

//帮派信息
message GroupInfo{
	required string groupId = 1; //帮派id
	required string groupIcon = 2; //帮派图标
	required string groupName = 3; //帮派名字
	optional float betRate = 4; //赔率
}

//请求竞猜
message ReqAllGuessInfo{
	required GCRequestType reqType = 1; //请求类型
}

//回应赛事竞猜
message RspAllGuessInfo{
	required GCResultType rstType = 1; //是否成功处理
	repeated MatchGuessInfo guessInfo = 2;
}

//请求押注
message ReqNewGuess{
	required GCRequestType reqType = 1; //请求类型
	required int32 matchId = 2;		//比赛的id
	required string groupId = 3; //帮派id
	required int32 coin = 4; //押注金币（有可能是配置id，而不是具体金额）
}

//回应押注
message RsqNewGuess{
	required GCResultType rstType = 1; //是否成功处理
	optional string tipMsg = 2;	//提示消息，可以是成功，也可以是失败的提示消息
}

//用于同屏的玩家基本信息
message PlayerBaseInfo{
	required string userId = 1;//玩家ID
	required string userName = 2;//玩家名字
	required int32 level = 3;//玩家等级
	required string imageId = 4;//头像ID
	required int32 career = 5;//职业
	required int32 sex = 6;//性别
	required int32 careerLevel = 7;//职业等级
	required int32 fightingAll = 8;//总战斗力
	optional int32 modelId = 9;//模型ID
	optional FashionService.FashionUsed fashionUsage = 10;//玩家穿戴的时装（如果玩家没有购买时装，则是没有指定）
	required int32 starLevel = 11;
	required string qualityId = 12;
}

// 海选响应数据
message SelectionRspData {
	repeated SelectionGroupData rankings = 1; // 海选排名的帮派信息
	optional SelectionGroupData ownGroupData = 2; // 自身帮派的信息
	required fixed64 selectionEndTime = 3; // 海选结束时间
}

// 海选的帮派数据
message SelectionGroupData {
	required fixed32 ranking = 1; // 帮派的排名（-1=未上榜）
	required string name = 2; // 帮派的名字
	required fixed64 fighting = 3; // 帮派的战斗力
	required fixed32 upNum = 4; // 排名变化的数据（负数表示下降，正数表示上升）
}

// 队伍请求，返回CommonRsp
message TeamRequest {
	required GCRequestType reqType = 1; // 请求的类型（仅限GCRequestType.CreateTeam和GCRequestType.AdjustTeamMember、GCRequestType.StartRandomMatching、GCRequestType.CancelRandomMatching、GCRequestType.PersonalMatching、GCRequestType.PersonalCancelMatching）
	repeated string heroId = 2; // 整容的英雄id
}

// 加入队伍请求，返回CommonRsp
message JoinTeamReq {
	required string teamId = 1; // 队伍id
	repeated string heroId = 2; // 英雄id
}

// 队员请求，返回CommonRsp，如果是GCRequestType.InviteMember，目标user会收到TeamInvitation
message TeamMemberRequest {
	required GCRequestType reqType = 1; // 请求类型（仅限GCRequestType.InviteMember和GCRequestType.KickMember）
	required string targetUserId = 2; // 目标的userId
}

// 准备状态请求，返回CommonRsp
message TeamStatusRequest {
	required GCRequestType reqType = 1; // 仅限（GCRequestType.SetTeamReady、GCRequestType.CancleTeamReady、GCRequestType.LeaveTeam、GCRequestType.StartMatching、GCRequestType.CancelMatching）
}

// 队伍邀请，服务器收到MsgDef.proto里的MSG_GROUP_COMPETITION_TEAM_MEMBER_REQ command之后
// 如果处理成功，会通过MSG_GROUP_COMPETITION_TEAM_MEMBER_REQ command发送这个message给被邀请的用户
message TeamInvitation {
	required string teamId = 1; // 队伍id
	required string tips = 2; // 提示消息
}

message CommonRsp {
	required GCResultType resultType = 1;
	optional string tips = 2;
}

// 队伍状态发生变化
message TeamStatusChange {
	required TeamStatusType status = 1;
}


// 赛事直播的参数
message ParaForLiveMsg{
	required fixed32 matchId = 1;		//赛事阶段的id
	optional fixed64 latestTime = 2;	//赛事记录最新的时间(LeaveLivePage的时候，不需要这个参数)
}

// 赛事回放的参数
message ParaForPlayBack{
	required fixed32 matchId = 1;		//赛事阶段的id
}

// 获取排行榜的参数
message ParaForGetRank{
	required int32 eventsType = 1;	//赛事阶段的id
}

//排行榜的数据结构（击杀、连胜、积分，三个排行榜共用的）
message GCompRankItem{
	required string userId = 1;
	required string userName = 2;
	required string headImage = 3;	//头像
	required int32 value = 4;	//击杀数、或连胜数、或积分
	required string groupName = 5;
}

// 帮派积分排行榜请求的响应数据
message GCompGroupScoreRankRspData {
	repeated GCompGroupScoreRankItem scoreRankItem = 1;
	repeated GCompHistoryChampion historyChampion = 2;
	required fixed32 totalScoreRankItemCount = 3; // 积分榜总共的条目数量
}

// 帮派积分排行榜数据
message GCompGroupScoreRankItem {
	required string groupName = 1; // 帮派名字
	required string groupIcon = 2; // 帮派的icon
	required fixed64 fighting = 3; // 战斗力
	required fixed32 currentScore = 4; // 帮派的当前积分
	required fixed32 totalScore = 5; // 帮派的总积分
	required fixed32 ranking = 6; // 排名
}

// 帮战历史冠军数据
message GCompHistoryChampion {
	required string groupName = 1;
	required string groupIconId = 2;
	required string leaderName = 3;
	repeated string assistantName = 4; // 副帮主的名字
	required fixed32 score = 5; // 赛事总结分
	required fixed32 session = 6; // 第几届
}

// 胜利的帮派id
message EventsResult {
	required string winGroupId = 1;
}
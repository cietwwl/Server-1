syntax = "proto2";
option java_package = "com.rwproto";
option java_outer_classname = "GroupSecretProto";

package groupSecret;

//矿点的位置
enum GroupSecretIndex{
	MAIN = 1;//主矿点
	LEFT = 2;//第二个矿点
	RIGHT = 3;//第三个矿点
}

//匹配到的秘境状态
enum MatchSecretState{
	NON_BATTLE = 1;//未开战
	IN_BATTLE = 2;//战斗中
	IN_ROB_PROTECT = 3;//掠夺保护中
}

//以后做版本控制发送数据会用到，现在暂时不用，只是先定义
enum ProtoType{
	NONE = 1;//
}

//请求类型
enum RequestType{
	OPEN_MAIN_VIEW = 1;//打开秘境主界面
	CREATE_GROUP_SECRET = 2;//创建帮派秘境
	GET_GROUP_SECRET_REWARD = 3;//获取秘境奖励
}

//版本信息
message VersionInfo{
	required ProtoType protoType = 1;//协议类型
	required int32 verison = 2;//版本
}

//英雄的剩余血量能量等信息
message HeroLeftInfo{
	required int32 life = 1;//剩余的生命
	required int32 energy = 2;//剩余的能量
	required int32 maxLife = 3;//全部的血量
	required int32 maxEnergy = 4;//全部的能量
}

//驻守的英雄的基础信息
message DefendHeroBaseInfo{
	required string headImageId = 1;//头像Id
	required string qualityId = 2;//品质<直接发回的是RoleQualityCfg中的Key>
	required int32 starLevel = 3;//星级
	required int32 level = 4;//等级
	required bool isMainRole = 5;//是否是主角
	required bool isDie = 6;//是否死亡<如果已经死亡就不需要读取HeroLeftInfo>
	optional HeroLeftInfo heroLeftInfo = 7;//剩余的信息
}

//阵容的基础信息
message DefendTeamInfo{
	required string headImageId = 1;//头像Id
	required string name = 2;//名字
	required int32 level = 3;//等级
	optional int32 productionSpeed = 4;//个人的生产速度
	required int32 defendFighting = 5;//驻守时的战斗力
	required int32 magicId = 6;//法宝的模版Id
	required int32 magicLevel = 7;//法宝的等级
	repeated DefendHeroBaseInfo heroBaseInfo = 8;//驻守英雄的基础信息
	required string userId = 9;//驻守角色的Id
	optional int32 zoneId = 10;//区Id
	optional string zoneName = 11;//区的名字
	optional string groupName = 12;//帮派的名字
}

//驻守信息
message DefendUserInfo{
	required GroupSecretIndex index = 1;//驻守的点
	required bool isBeat = 2;//是否已经击败了<如果是true，就不用读取TeamInfo，这个只针对匹配的信息才有意义>
	optional DefendTeamInfo teamInfo = 3;//阵容信息
}

//掉落的资源类型
message SecretDropInfo{
	required int32 dropResource = 1;//资源数量
	optional int32 diamond = 2;//钻石数量
	optional int32 groupSupply = 3;//帮派物资
	optional int32 groupExp = 4;//帮派物资
}

//当前秘境的基础信息
message SecretBaseInfo{
	required int32 productionSpeed = 1;//生产速度
	required int32 leftTime = 2;//剩余驻守的时间
	repeated DefendUserInfo userInfo = 3;//驻守信息
}

//自己每个驻守的秘境信息
message GroupSecretInfo{
	required string id = 1;//秘境的Id
	required int32 secretCfgId = 2;//秘境的配置Id
	required bool isFinish = 3;//是否完成，如果完成就读DropInfo
	required SecretDropInfo dropInfo = 4;//掉落数据<完成不完成的时候都是掉落>
	optional SecretBaseInfo baseInfo = 5;//驻守的信息
}

//匹配的秘境信息
message MatchSecretInfo{
	required string id = 1;//秘境的Id
	required int32 secretCfgId = 2;//秘境的模版Id
	required bool isBeat = 3;//是否打败了
	required SecretDropInfo dropInfo = 4;//可以掠夺的资源
	optional int32 leftTime = 5;//保护的时间<只有开打了之后才会有这个时间>
	repeated DefendUserInfo defendUserInfo = 6;//驻守的阵容信息
}

//打开秘境主界面的响应消息
message OpenGroupSecretMainViewRspMsg{
	repeated GroupSecretInfo groupSecretInfo = 1;//自己已经创建的秘境
	optional MatchSecretInfo matchSecretInfo = 2;//匹配到的秘境数据<如果没有这个数据，就说明当前没有匹配到人>
}

//请求创建秘境的请求消息
message CreateGroupSecretReqMsg{
	required int32 secretCfgId = 1;//请求创建的秘境模版Id
	repeated string teamHeroId = 2;//防守阵容的英雄列表Id
}

//创建秘境之后的响应消息
message CreateGroupSecretRspMsg{
	required GroupSecretInfo groupSecretInfo = 1;//创建之后秘境的消息
}

//请求领奖的协议
message GetGroupSecretRewardReqMsg{
	required string id = 1;//请求领取奖励的秘境Id
}

//请求更换防守阵容的请求消息
message ChangeDefendTeamReqMsg{
	repeated string teamHeroId = 1;//请求更换的阵容信息
}

//请求更换防守阵容的响应消息
message ChangeDefendTeamRspMsg{
	required DefendUserInfo defendUserInfo = 1;//防守阵容
}

message GroupSecretCommonReqMsg{
	required RequestType reqType = 1;//请求协议类型
	repeated VersionInfo version = 2;//客户端的数据版本<暂时不需要这个，可以忽略>
	optional CreateGroupSecretReqMsg createReqMsg = 3;//创建秘境的请求协议
	optional GetGroupSecretRewardReqMsg getRewardReqMsg = 4;//领取奖励信息
}

message GroupSecretCommonRspMsg{
	required RequestType reqType = 1;//请求类型
	required bool isSuccess = 2;//是否成功
	optional string tipMsg = 3;//提示消息
	optional OpenGroupSecretMainViewRspMsg openMainView = 4;//打开界面时接受的消息
	optional CreateGroupSecretRspMsg createRspMsg = 5;//创建秘境的响应消息
}
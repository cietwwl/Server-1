//Generated by ConfigCheckerWin tool. Develop by Franky.
//Version:2.0
using System;
using System.IO;
using LitJson;
using ConfigHelper;
using Common;
using LumenWorks.Framework.IO.Csv;
using System.Collections.Generic;

namespace CONFIG_TaoistMagic{

using DictionaryEntry = System.Collections.DictionaryEntry;
using AdapterSource = System.Collections.Generic.IEnumerable<Adapter>;
using Dictionary = System.Collections.Generic.Dictionary<int,TaoistConsumeCfg>;
using KeyValuePair = System.Collections.Generic.KeyValuePair<int,TaoistConsumeCfg>;

public partial class TaoistConsumeCfg:MachineBase
{
  public readonly int key; //key...
  public readonly int consumeId; //技能消耗ID...
  public readonly int skillLevel; //技能等级...
  public readonly eSpecialItemId coinType; //货币类型...
  public readonly int coinCount; //消耗...
  public readonly string criticalPlans; //暴击组合序列...

		public static string[] Headers{
			get{
				string[] headers = {"key","Remarks","consumeId","skillLevel","coinType","coinCount","criticalPlans"};
				return headers;
			}
		}

  private TaoistConsumeCfg(CsvReader csv){
    int.TryParse(csv[0],out this.key);
    int.TryParse(csv[2],out this.consumeId);
    int.TryParse(csv[3],out this.skillLevel);
    this.coinType=(eSpecialItemId)Enum.Parse(typeof(eSpecialItemId),csv[4]);
    int.TryParse(csv[5],out this.coinCount);
    this.criticalPlans=csv[6];
  WhenConstructed();
  }

  public TaoistConsumeCfg(Adapter adapter){
	var headers = Headers;
    adapter.tryGetFieldValue<int>(headers[0],out this.key);
    adapter.tryGetFieldValue<int>(headers[2],out this.consumeId);
    adapter.tryGetFieldValue<int>(headers[3],out this.skillLevel);
    this.coinType=adapter.getFieldValue<eSpecialItemId>(headers[4]);
    adapter.tryGetFieldValue<int>(headers[5],out this.coinCount);
    this.criticalPlans=adapter.getFieldValue(headers[6]);
  WhenConstructed();
  }

		public static void Load(AdapterSource sources){
			if (cfgdict == null) {
			   cfgdict = Create(sources);
			   OnDictionaryCreated.DoOnceNull();
			}
		}

		public static Dictionary Create(AdapterSource sources){
			Dictionary result = new Dictionary();
			foreach(var item in sources){
				int key = item.getFieldValue<int>("key");
				result.Add(key, new TaoistConsumeCfg(item));
			}
			return null;
		}

		public bool GetByFieldName<T>(string fieldName,out T value)
		{
			object val;
			bool result = true;
			if (string.Compare(fieldName,"key",true) == 0){
				val = this.key;
			}else
			if (string.Compare(fieldName,"consumeId",true) == 0){
				val = this.consumeId;
			}else
			if (string.Compare(fieldName,"skillLevel",true) == 0){
				val = this.skillLevel;
			}else
			if (string.Compare(fieldName,"coinType",true) == 0){
				val = this.coinType;
			}else
			if (string.Compare(fieldName,"coinCount",true) == 0){
				val = this.coinCount;
			}else
			if (string.Compare(fieldName,"criticalPlans",true) == 0){
				val = this.criticalPlans;
			}else
			{
				val = default(T);
				result = false;
			}
			try {
				value = (T)val;
			} catch (Exception ex) {
				value = default(T);
				result = false;
			}
			return result;
		}

  private static TaoistConsumeCfg CreateFrom(CsvReader csv){
  TaoistConsumeCfg result = new TaoistConsumeCfg(csv);
    return result;
  }

		private static void CreateByLine(CsvReader csv,Action<string[],CsvReader,int> oneLine){
			int rowCount = 0;
			csv.MissingFieldAction = MissingFieldAction.ReplaceByNull;
			string [] headers = csv.GetFieldHeaders();
			while (csv.ReadNextRecord()){
				rowCount++;
				try{
					oneLine(headers,csv,rowCount);
				}catch(System.Exception e){
					GameDebug.LogException(e,"key name={1}, line = {0}",rowCount,csv[0]);
				}
			}
		}

		public static void CreateByMeta(string configName,Action<string[],CsvReader,int> oneLine){
			if (oneLine == null) return;
			ConfigHelper.AutoConfigMgr.UseResouce(configName,delegate(TextReader reader) {
				CustomLoader(reader,oneLine);
			});
		}

		public static void CreateByMeta(Action<string[],CsvReader,int> oneLine){
			CreateByMeta(cfgfilename,oneLine);
		}

		public static void CustomLoader(TextReader reader,Action<string[], CsvReader, int> oneLine){
				try{
					using (CsvReader csv  = new CsvReader(reader,AutoConfigMgr.csvFileHasHeader)){
						csv.MissingFieldAction = MissingFieldAction.ReplaceByNull;
						CreateByLine(csv,oneLine);
					}
				}catch(Exception e){
					GameDebug.LogException(e);
				}
		}

		public static Dictionary Create(TextReader reader){
				Dictionary result = new Dictionary(184);
			CustomLoader(
				reader,delegate(string[] headers, CsvReader csv, int rowCount){
          int key = int.Parse(csv[0]);
				result.Add(key, CreateFrom(csv));
			});
			return result;
		}

		public static void Load(TextReader reader){
			if (cfgdict == null) {
			   cfgdict = Create(reader);
			   OnDictionaryCreated.DoOnceNull();
			}
		}

		//two predicates return false mean to skip current line
		private static void CreateOneLine(CsvReader csv,Dictionary dict,Predicate<int> keyPred,Predicate<TaoistConsumeCfg> linePred = null){
			int key = int.Parse(csv[0]);
			if (keyPred != null && !keyPred(key)) return;
			var line = CreateFrom(csv);
			if (linePred != null && !linePred(line)) return;
			dict.Add(key,line);
		}
		private static Dictionary CreateByFilter(CsvReader csv,Dictionary dict,Predicate<int> keyPred,Predicate<TaoistConsumeCfg> linePred = null){
			if (keyPred == null && linePred == null) return null;
			Dictionary result = new Dictionary();
			CreateByMeta(delegate(string[] headers, CsvReader lineCsv, int rowCount) {
				CreateOneLine(lineCsv,result,keyPred,linePred);
			});
			return result;
		}
  //must be UTF-8 encoding without any headers (the first 4 lines must strip from csv)
  public static Dictionary Create(){
    Dictionary result = new Dictionary(184);
    CreateByMeta(delegate(string[] headers, CsvReader csv, int rowCount) {
          int key = int.Parse(csv[0]);
          result.Add(key,CreateFrom(csv));
    });
    return result;
  }

  public const string cfgfilename="Assets/Config/TaoistMagic/TaoistConsumeCfg.csv";
  private static Dictionary cfgdict = null;
  public static void Load(){
	  if (cfgdict == null) {
	     cfgdict = Create ();
	     OnDictionaryCreated.DoOnceNull();
	  }
  }
  public static Dictionary UnLoad(){
	  Dictionary release = cfgdict;
	  cfgdict = null;
	  return release;
  }

  public static void LoadAsyn(Action act){
  	MultiTasks.UIThreadEventMgr.RunNonUITask(delegate {
  		Load ();
  	},delegate(FP.Maybe<Exception> result) {
  		result.doIfSomething(delegate(Exception arg) {
  			GameDebug.LogException(arg);
  		});
  		if (act != null) act();
  	});
  }
  //will load synchronized (usually in UI thread) if not loaded
  public static TaoistConsumeCfg GetByKey(int key){
  	Load();
  try{
  	    if (key == null) return null;
  	    TaoistConsumeCfg value;
  	    cfgdict.TryGetValue(key,out value);
  	    return value;
  }catch (Exception e){
  	GameDebug.LogException(e);
  	return null;
  }
  }

	//will load synchronized (usually in UI thread) if not loaded
	public static IEnumerable<KeyValuePair> Get(Predicate<KeyValuePair> match){
		Load();
		try{
			return cfgdict.Filter(match);
		}catch (Exception e){
			GameDebug.LogException(e);
			return null;
		}
	}

	//will load synchronized (usually in UI thread) if not loaded
	public static IEnumerable<int> Keys(){
		Load();
		try{
			return cfgdict.Keys;
		}catch (Exception e){
			GameDebug.LogException(e);
			return null;
		}
	}

	//will load synchronized (usually in UI thread) if not loaded
	public static IEnumerable<TaoistConsumeCfg> Values(){
		Load();
		try{
			return cfgdict.Values;
		}catch (Exception e){
			GameDebug.LogException(e);
			return null;
		}
	}

}
}

namespace ConfigHelper{
	internal partial class TaoistMagicTaoistConsumeCfgController:ConfigController{
		public override void Load(){
			CONFIG_TaoistMagic.TaoistConsumeCfg.Load();
		}
		public override void UnLoad(){
			CONFIG_TaoistMagic.TaoistConsumeCfg.UnLoad();
		}
		public override string name {get{
				return CONFIG_TaoistMagic.TaoistConsumeCfg.cfgfilename;
			}
		}
		public override void CreateByMeta(string configName,Action<string[],CsvReader,int> oneLine){
			CONFIG_TaoistMagic.TaoistConsumeCfg.CreateByMeta(configName,oneLine);
		}
	}
	public partial class CSVConfigCollection{
			TaoistMagicTaoistConsumeCfgController TaoistMagicTaoistConsumeCfgControllerInstance = new TaoistMagicTaoistConsumeCfgController();
	}
}

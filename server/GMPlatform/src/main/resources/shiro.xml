<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<description>shiro 配置</description>

	<!-- securityRealm 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的securityRealm.java -->
	<bean id="securityRealm" class="com.server.security.SecurityRealm" />
	
	<!-- 安全管理器 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 --> 
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realms">
			<list>
				<ref bean="securityRealm" /><!-- 这里面暂时是只实现一个realm -->
			</list>
		</property>
		<property name="cacheManager" ref="cacheManager" /><!--  -->
	</bean>

	<!-- 缓存管理器，用来管理用户，角色，权限等缓存 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"></bean>

	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />


	<!-- 基于 Form 表单的身份验证过滤器
	<bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
		<property name="usernameParam" value="username" />
		<property name="passwordParam" value="password" />
		<property name="loginUrl" value="/index.html" />
	</bean> 
	  -->

	<!-- 过滤器设置 -->
	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->  
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->  
		<!-- <property name="loginUrl" value="/login"/> 
	
		<property name="filters">
			<util:map>
				<entry key="authc" value-ref="formAuthenticationFilter" />
			</util:map>
		</property>
		-->
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->
		<!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后登录后访问/user/listUser.jsp就看见浏览器会显示unauthor.jsp -->
		<property name="unauthorizedUrl" value="/500" />
	
		<!-- Shiro连接约束配置,即过滤链的定义 -->  
	    <!-- 此处可查看 securityRealm 来理解各个过滤链的作用 -->  
	    <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
	    <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
	    <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
		<!-- anon 表示匿名访问（不需要认证与授权），authc 表示需要认证  -->
		<property name="filterChainDefinitions">
			<value>
				/index.html = anon
				/app/** = anon
				/assets/** = anon
				/page/** = anon
				<!--/** = loginFilter    如果设置为默认的 authc, 则无法通过，会直接返回login页面  -->
				/admin/** = authc, roles[admin]
			</value>
		</property>
	</bean>
	
	
	
	<bean id="loginFilter" class="com.server.security.LoginFilter" />
	
</beans>